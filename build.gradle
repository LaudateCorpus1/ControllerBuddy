plugins {
	id 'application'
	id 'com.github.spotbugs' version '4.6.0'
	id 'com.diffplug.gradle.spotless' version '3.27.2'
	id 'eclipse'
	id 'org.ajoberstar.grgit' version '4.1.0'
}

mainClassName = 'de.bwravencl.controllerbuddy.gui.Main'
version = "${org.ajoberstar.grgit.Grgit.open(dir: projectDir).describe(longDescr: true).replaceFirst(java.util.regex.Pattern.quote('-'), '.').replaceFirst(java.util.regex.Pattern.quote('-g'), '-')}"

sourceCompatibility = 15
targetCompatibility = 15

ext {
	versionWithoutHash = version.substring(0, version.indexOf('-'))

	jnaVersion = '5.5.0'
	lwjglVersion = '3.2.3'

	genDir = 'gen'
	versionDir = "$genDir/main/java"

	jdtUiPrefsFile = '.settings/org.eclipse.jdt.ui.prefs'

	libsDir = "$buildDir/$libsDirName"
	tmpDir = "$buildDir/tmp"
	appImageDir = "$tmpDir/$project.name"
	runtimeDir = "$tmpDir/runtime"
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
	implementation 'commons-cli:commons-cli:1.4',
			'com.formdev:flatlaf:0.45',
			'com.github.nyholku:purejavahidapi:ef5679619d',
			'com.google.code.gson:gson:2.8.6',
			'io.github.classgraph:classgraph:4.8.95',
			"net.java.dev.jna:jna:$jnaVersion",
			"net.java.dev.jna:jna-platform:$jnaVersion",
			"org.lwjgl:lwjgl:$lwjglVersion",
			"org.lwjgl:lwjgl-glfw:$lwjglVersion",
			"org.lwjgl:lwjgl-opengl:$lwjglVersion",
			"org.lwjgl:lwjgl-openvr:$lwjglVersion"
	implementation	('org.apache.xmlgraphics:batik-swing:1.13') {
		exclude group: 'xml-apis', module: 'xml-apis'
	}
	runtimeOnly "org.lwjgl:lwjgl:$lwjglVersion:natives-linux",
			"org.lwjgl:lwjgl:$lwjglVersion:natives-macos",
			"org.lwjgl:lwjgl:$lwjglVersion:natives-windows",
			"org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-linux",
			"org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-macos",
			"org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-windows",
			"org.lwjgl:lwjgl-opengl:$lwjglVersion:natives-windows",
			"org.lwjgl:lwjgl-openvr:$lwjglVersion:natives-windows"
}

spotbugs {
	effort = 'max'
	baselineFile = file("$projectDir/spotbugs-baseline.xml")
	reportLevel = 'low'
}

spotless {
	encoding 'UTF-8'
	java {
		target 'src/main/java/de/bwravencl/**/*.java'
		encoding 'Cp1252'
		eclipse().configFile 'spotless.eclipseformat.xml'
		importOrderFile 'spotless.importorder'
		licenseHeader '''\
			/* Copyright (C) $YEAR  Matteo Hausner
			 *
			 * This program is free software; you can redistribute it and/or modify
			 * it under the terms of the GNU General Public License as published by
			 * the Free Software Foundation; either version 2 of the License, or
			 * (at your option) any later version.
			 *
			 * This program is distributed in the hope that it will be useful,
			 * but WITHOUT ANY WARRANTY; without even the implied warranty of
			 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
			 * GNU General Public License for more details.
			 *
			 * You should have received a copy of the GNU General Public License along
			 * with this program; if not, write to the Free Software Foundation, Inc.,
			 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
			 */

			'''.stripIndent()
	}
	groovyGradle {
		target '*.gradle'
		greclipse().configFile('spotless.eclipseformat.xml')
	}
	format 'newlineAndTrailingWhitespace', {
		target '.github/workflows/*.yml', 'src/main/resources/**/*.properties', 'src/main/resources/**/*.svg'
		endWithNewline()
		trimTrailingWhitespace()
	}
	format 'onlyNewline', {
		target 'LICENSE', '*.gitignore', '*.importorder', '*.md', 'src/main/resources/**/*.txt', '*.txt', '*.xml'
		endWithNewline()
	}
}

jar.dependsOn check

task cleanGenDirectory {
	description = 'Removes the \'gen\' directory'
	doLast { delete genDir }
}

clean.dependsOn cleanGenDirectory

task generateVersion {
	description = 'Creates a source directory named \'gen\' and inside it generates a source file that defines a version string. Also removes any preexisting gen directory.'
	dependsOn cleanGenDirectory
	def outputDir = file("$versionDir")
	outputs.dir outputDir
	doLast {
		def srcFile = new File(outputDir, "de/bwravencl/controllerbuddy/version/Version.java")
		srcFile.parentFile.mkdirs()
		srcFile.write("""\
			package de.bwravencl.controllerbuddy.version;\n
			public class Version {

			\tpublic static final String VERSION = "$project.version";

			}
			""".stripIndent())
	}
}

task cleanJdtUiPrefs {
	description = 'Removes the \'org.eclipse.jdt.ui.prefs\' settings file'
	doLast { delete jdtUiPrefsFile }
}

tasks.cleanEclipse.dependsOn cleanJdtUiPrefs

tasks.eclipse.dependsOn generateVersion

eclipse {
	classpath {
		file {
			whenMerged { cp ->
				cp.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("$versionDir", null) )
			}
		}
	}
	jdt {
		file {
			withProperties { properties ->
				new XmlParser().parse(file('spotless.eclipseformat.xml')).profile[0].'setting'.each {
					properties[it.'@id'] = it.'@value'
				}
			}
		}
	}
}

tasks.eclipse.doLast {
	File uiPrefs = file(jdtUiPrefsFile)
	if (uiPrefs.exists())
		logger.warn("UI preferences already exist and will not be overridden. Use task 'cleanEclipse' first.")
	else {
		uiPrefs.append('''\
			eclipse.preferences.version=1
			editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=true
			formatter_settings_version=20
			sp_cleanup.add_default_serial_version_id=true
			sp_cleanup.add_generated_serial_version_id=false
			sp_cleanup.add_missing_annotations=true
			sp_cleanup.add_missing_deprecated_annotations=true
			sp_cleanup.add_missing_methods=false
			sp_cleanup.add_missing_nls_tags=false
			sp_cleanup.add_missing_override_annotations=true
			sp_cleanup.add_missing_override_annotations_interface_methods=true
			sp_cleanup.add_serial_version_id=false
			sp_cleanup.always_use_blocks=false
			sp_cleanup.always_use_parentheses_in_expressions=false
			sp_cleanup.always_use_this_for_non_static_field_access=false
			sp_cleanup.always_use_this_for_non_static_method_access=false
			sp_cleanup.convert_functional_interfaces=true
			sp_cleanup.convert_to_enhanced_for_loop=true
			sp_cleanup.convert_to_enhanced_for_loop_if_loop_var_used=false
			sp_cleanup.correct_indentation=true
			sp_cleanup.format_source_code=true
			sp_cleanup.format_source_code_changes_only=false
			sp_cleanup.insert_inferred_type_arguments=false
			sp_cleanup.lazy_logical_operator=true
			sp_cleanup.make_local_variable_final=true
			sp_cleanup.make_parameters_final=true
			sp_cleanup.make_private_fields_final=true
			sp_cleanup.make_type_abstract_if_missing_method=false
			sp_cleanup.make_variable_declarations_final=true
			sp_cleanup.merge_conditional_blocks=true
			sp_cleanup.never_use_blocks=true
			sp_cleanup.never_use_parentheses_in_expressions=true
			sp_cleanup.number_suffix=true
			sp_cleanup.objects_equals=true
			sp_cleanup.on_save_use_additional_actions=true
			sp_cleanup.organize_imports=true
			sp_cleanup.precompile_regex=true
			sp_cleanup.push_down_negation=true
			sp_cleanup.qualify_static_field_accesses_with_declaring_class=false
			sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
			sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
			sp_cleanup.qualify_static_member_accesses_with_declaring_class=true
			sp_cleanup.qualify_static_method_accesses_with_declaring_class=false
			sp_cleanup.remove_private_constructors=true
			sp_cleanup.remove_redundant_modifiers=true
			sp_cleanup.remove_redundant_semicolons=true
			sp_cleanup.remove_redundant_type_arguments=true
			sp_cleanup.remove_trailing_whitespaces=true
			sp_cleanup.remove_trailing_whitespaces_all=true
			sp_cleanup.remove_trailing_whitespaces_ignore_empty=false
			sp_cleanup.remove_unnecessary_array_creation=true
			sp_cleanup.remove_unnecessary_casts=true
			sp_cleanup.remove_unnecessary_nls_tags=true
			sp_cleanup.remove_unused_imports=true
			sp_cleanup.remove_unused_local_variables=false
			sp_cleanup.remove_unused_private_fields=true
			sp_cleanup.remove_unused_private_members=false
			sp_cleanup.remove_unused_private_methods=true
			sp_cleanup.remove_unused_private_types=true
			sp_cleanup.simplify_lambda_expression_and_method_ref=true
			sp_cleanup.sort_members=true
			sp_cleanup.sort_members_all=false
			sp_cleanup.use_anonymous_class_creation=false
			sp_cleanup.use_autoboxing=true
			sp_cleanup.use_blocks=true
			sp_cleanup.use_blocks_only_for_return_and_throw=false
			sp_cleanup.use_directly_map_method=true
			sp_cleanup.use_lambda=true
			sp_cleanup.use_parentheses_in_expressions=true
			sp_cleanup.use_this_for_non_static_field_access=true
			sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true
			sp_cleanup.use_this_for_non_static_method_access=true
			sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true
			sp_cleanup.use_unboxing=true
			sp_cleanup.use_var=true
			'''.stripIndent())
	}
}

compileJava {
	dependsOn generateVersion
	source generateVersion.outputs.files, sourceSets.main.java
	options.compilerArgs += ["-Xlint:deprecation"]
}

task jlink(type: Exec) {
	description = 'Executes the jlink command to create a customized minimal Java runtime inside the build directory. Also removes any preexisting runtime in the same directory.'
	group
	doFirst { delete runtimeDir }
	commandLine 'jlink', '--output', "$runtimeDir", '--strip-debug', '--no-header-files', '--no-man-pages', '--strip-native-commands', '--add-modules', 'java.desktop,java.sql,jdk.unsupported,jdk.xml.dom'
}

task copyLibs(type: Copy) {
	description = 'Copies all jar files into a directory called \'libs\' inside the build directory.'
	dependsOn jar
	from configurations.runtimeClasspath
	into "$libsDir"
}

task customizeLoggingProperties {
	description = 'Alters the default "logging.properties" configuration file of the Java runtime to include a FileHandler that logs to a logfile in the system\'s TEMP directory using SimpleFormatter with custom formatting.'
	dependsOn jlink
	doLast {
		ant.propertyfile(file: "$runtimeDir/conf/logging.properties") {
			entry(key: 'handlers', value: 'java.util.logging.FileHandler, java.util.logging.ConsoleHandler')
			entry(key: 'java.util.logging.FileHandler.pattern', value: "%t/${project.name}.log")
			entry(key: 'java.util.logging.FileHandler.formatter', value: 'java.util.logging.SimpleFormatter')
			entry(key: 'java.util.logging.SimpleFormatter.format', value: '[%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS:%1$tL] %3$s: %5$s%6$s%n')
		}
	}
}

task jpackage(type: Exec) {
	description = 'Executes the jpackage command to create a standalone application image packaged with a custom minimal Java runtime.'
	dependsOn copyLibs, customizeLoggingProperties
	doFirst { delete "$appImageDir" }
	commandLine 'jpackage', '--input', "$libsDir", '--dest', "$tmpDir", '--type', 'app-image', '--name', "$project.name", '--runtime-image', "$runtimeDir", '--main-class', "$mainClassName", '--main-jar', "${project.name}-${version}.jar", '--app-version', "$versionWithoutHash", '--icon', "$projectDir/icon.ico", '--copyright', "Copyright ${new Date().format('yyyy')} Matteo Hausner", '--vendor', 'Matteo Hausner', '--verbose'
}

startScripts.enabled = false
distTar.enabled = false

task distZip(type: Zip, overwrite: true) {
	dependsOn jpackage
	from "$tmpDir"
	include "$project.name/**"
}

task installDist(type: Sync, overwrite: true) {
	dependsOn jpackage
	from "$tmpDir"
	into "$buildDir/install"
	include "$project.name/**"
}
